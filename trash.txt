
// export const fetchCanvasData = async () => {
// 	try {
// 		const response = await fetch("../constants/data/framed-canvas.json");
// 		if (!response.ok) {
// 			throw new Error(`HTTP error! status: ${response.status}`);
// 		}
// 		const data = await response.json();
// 		return data;
// 	} catch (error) {
// 		console.error("Error fetching data:", error);
// 		// Handle errors appropriately (e.g., display an error message to the user)
// 	}
// };

// import getBase64 from "@/lib/getbase64";

// export async function fetchImages() {
// 	const accessKey = process.env.NEXT_PUBLIC_UNSPLASH_ACCESS_KEY;
// 	const apiUrl = `https://api.unsplash.com/photos/random?count=10&query=art&client_id=${accessKey}`;

// 	try {
// 		const response = await fetch(apiUrl);
// 		if (!response.ok || response.status !== 200) {
// 			throw new Error("Network response was not ok");
// 		}
// 		const data = await response.json();

// 		const imagesWithBase64 = await Promise.all(
// 			data.map(async (image) => {
// 				const base64 = await getBase64(image.urls.regular);
// 				return { ...image, base64 };
// 			})
// 		);

// 		return imagesWithBase64;
// 		// return data;
// 	} catch (error) {
// 		console.error("There was a problem with the fetch operation:", error);
// 	}
// }

export const fetchPrintedHoodies = async (slug) => {
	try {
		// Decode the name parameter
		const decodedName = decodeURIComponent(slug);

		const jsonData = fs.readFileSync("constants/data/wears.json", "utf8");
		const data = JSON.parse(jsonData);

		// Find the product with the matching name
		const product = data.printed_hoodies?.find((item) => {
			const itemName = decodeURIComponent(item.slug);
			return itemName === decodedName;
		});

		if (!product) {
			throw new Error(`Product with name '${decodedName}' not found`);
		}
		return product;
	} catch (error) {
		// Throw the error to indicate failure
		throw new Error("Error reading data: " + error.message);
	}
};
export const fetchSingleCanvas = async (slug) => {
	try {
		// Decode the name parameter
		const decodedName = decodeURIComponent(slug);

		const jsonData = fs.readFileSync(
			"constants/data/framed-canvas.json",
			"utf8"
		);
		const data = JSON.parse(jsonData);

		// Find the product with the matching name
		const product = data.art_collection?.find((item) => {
			const itemName = decodeURIComponent(item.slug);
			return itemName === decodedName;
		});

		if (!product) {
			throw new Error(`Product with name '${decodedName}' not found`);
		}
		return product;
	} catch (error) {
		// Throw the error to indicate failure
		throw new Error("Error reading data: " + error.message);
	}
};



// export const fetchPrintsData = async () => {
// 	try {
// 		const jsonData = fs.readFileSync("constants/data/paper-print.json", "utf8");
// 		const data = JSON.parse(jsonData);
// 		return data.prints_on_paper;
// 	} catch (error) {
// 		// Throw the error to indicate failure
// 		throw new Error("Error reading data: " + error.message);
// 	}
// };
// export const fetchWearsData = async () => {
// 	try {
// 		const jsonData = fs.readFileSync("constants/data/wears.json", "utf8");
// 		const data = JSON.parse(jsonData);
// 		return data.printed_hoodies;
// 	} catch (error) {
// 		// Throw the error to indicate failure
// 		throw new Error("Error reading data: " + error.message);
// 	}
// };



{
	/* <div className="flex items-center h-[70vh] gap-8 overflow-x-auto md:hidden">
    {images &&
        images?.map((image, i) => (
            <Image
                src={image}
                alt={`${name}'s image-${i}`}
                height={500}
                width={300}
                className="object-cover h-full w-[300px]"
                sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
            />
        ))}
</div> */
}
{
	/* <div className="flex items-center justify-center gap-5">
					{images.map((image, i) => {
						return (
							<button onClick={() => setSlider(i)}>
								<Image
									src={image}
									height={100}
									width={100}
									className="w-[80px] h-[80px] object-cover cursor-pointer"
									alt={`${name}'s image`}
								/>
							</button>
						);
					})}
				</div> */
}


const [openNav, setOpenNav] = useState(false);
	const navRef = useRef<HTMLDivElement | null>(null);
	const tl = useRef<gsap.core.Timeline | null>(null);
	useGSAP(() => {
		tl.current = gsap.timeline({ paused: true });

		tl.current
			.to(navRef.current, {
				duration: 0.8,
				ease: "power4.inOut",
				clipPath: "polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)",
				pointerEvents: "all",
			})
			.from(
				".menu__item",
				{
					duration: 1.7,
					delay: 0,
					x: -100,
					opacity: 0,
					stagger: {
						amount: 0.4,
					},
					ease: "Expo.easeInOut",
				},
				"-=1"
			)
			.from(
				".socials",
				{
					duration: 0.5,
					y: 100,
					opacity: 0,
					stagger: {
						amount: 0.4,
					},
					ease: "Expo.easeOut",
				},
				"-=1.4"
			);
	}, []);



    addToCart: (productId, selectedSize = undefined) =>
		set((state) => {
			const existingItem = state.cart.find(
				(item) => item.productId === productId && item.size === selectedSize
			);

			if (existingItem) {
				// If the same product with the same size already exists, increase its quantity
				return {
					cart: state.cart.map((item) =>
						item.productId === productId && item.size === selectedSize
							? { ...item, quantity: item.quantity + 1 }
							: item
					),
				};
			} else {
				// Otherwise, add a new cart item with the selected size (or default size)
				const size = selectedSize || state.defaultSize(productId); // Use selected size or default
				return {
					cart: [...state.cart, { productId, size, quantity: 1 }],
				};
			}
		}),



        	// <svg
		// 	className="cursor-pointer svg-icon icon-bag hover:translate-y-[-2px] transition-transform duration-300 ease-in-out"
		// 	xmlns="http://www.w3.org/2000/svg"
		// 	width="21"
		// 	height="20"
		// 	viewBox="0 0 21 20"
		// >
		// 	<path
		// 		fill="currentColor"
		// 		fill-rule="evenodd"
		// 		clip-rule="evenodd"
		// 		d="M1.09053 5.00869H17.9096L18.9818 15.445C19.1672 17.0769 17.9119 18.51 16.2913 18.51L2.7087 18.51C1.08808 18.51 -0.167246 17.0769 0.0181994 15.445L1.09053 5.00869ZM2.40808 6.50869L1.48668 15.6168C1.40224 16.3599 1.97334 17.01 2.7087 17.01L16.2913 17.01C17.0267 17.01 17.5977 16.3599 17.5133 15.6168L16.592 6.50869H2.40808Z"
		// 		transform="translate(1)"
		// 	></path>
		// 	<path
		// 		fill="currentColor"
		// 		fill-rule="evenodd"
		// 		clip-rule="evenodd"
		// 		d="M7.3466 0.622759C7.90387 0.233871 8.61575 0 9.49996 0C10.3842 0 11.0961 0.233871 11.6533 0.622759C12.2048 1.00762 12.5612 1.51352 12.7903 1.99321C13.0183 2.47048 13.1286 2.93833 13.183 3.2803C13.2105 3.45311 13.2246 3.59868 13.2317 3.70389C13.2353 3.75662 13.2372 3.79958 13.2382 3.83116C13.2387 3.84696 13.239 3.85994 13.2392 3.86992L13.2393 3.8826L13.2394 3.88722L13.2394 3.88908C13.2394 3.88908 13.2394 3.89065 12.5002 3.89065C11.7612 3.90271 11.7611 3.89133 11.7611 3.89133L11.7611 3.89294L11.7608 3.8796C11.7603 3.86517 11.7593 3.84065 11.757 3.80751C11.7525 3.74096 11.7431 3.64118 11.7237 3.51955C11.6844 3.27264 11.6072 2.95533 11.4601 2.64744C11.3142 2.34196 11.108 2.06271 10.8157 1.85869C10.5291 1.65871 10.1159 1.5 9.49996 1.5C8.88403 1.5 8.47081 1.65871 8.18424 1.85869C7.8919 2.06271 7.68573 2.34196 7.53981 2.64744C7.39275 2.95533 7.31551 3.27264 7.2762 3.51955C7.25684 3.64118 7.24742 3.74096 7.24288 3.80751C7.24062 3.84065 7.23959 3.86517 7.23913 3.8796L7.23879 3.89337L7.23878 3.89193C7.23878 3.89193 7.23878 3.89065 6.49968 3.89065C5.76057 3.89065 5.76057 3.8899 5.76057 3.8899L5.76058 3.88722L5.7606 3.8826L5.76075 3.86992C5.7609 3.85994 5.76118 3.84696 5.76169 3.83116C5.76269 3.79958 5.7646 3.75662 5.76819 3.70389C5.77537 3.59868 5.7894 3.45311 5.81691 3.2803C5.87136 2.93833 5.98164 2.47048 6.20961 1.99321C6.43873 1.51352 6.79512 1.00762 7.3466 0.622759Z"
		// 		transform="translate(1)"
		// 	></path>
		// </svg>



        	{/* <svg
				onClick={onClick}
				xmlns="http://www.w3.org/2000/svg"
				width="24"
				height="20"
				viewBox="0 0 24 24"
				fill="none"
				stroke="currentColor"
				stroke-width="2"
				stroke-linecap="round"
				stroke-linejoin="round"
				class="lucide lucide-grip"
			>
				<circle cx="12" cy="5" r="1" />
				<circle cx="19" cy="5" r="1" />
				<circle cx="5" cy="5" r="1" />
				<circle cx="12" cy="12" r="1" />
				<circle cx="19" cy="12" r="1" />
				<circle cx="5" cy="12" r="1" />
				<circle cx="12" cy="19" r="1" />
				<circle cx="19" cy="19" r="1" />
				<circle cx="5" cy="19" r="1" />
			</svg> */}