
// export const fetchCanvasData = async () => {
// 	try {
// 		const response = await fetch("../constants/data/framed-canvas.json");
// 		if (!response.ok) {
// 			throw new Error(`HTTP error! status: ${response.status}`);
// 		}
// 		const data = await response.json();
// 		return data;
// 	} catch (error) {
// 		console.error("Error fetching data:", error);
// 		// Handle errors appropriately (e.g., display an error message to the user)
// 	}
// };

// import getBase64 from "@/lib/getbase64";

// export async function fetchImages() {
// 	const accessKey = process.env.NEXT_PUBLIC_UNSPLASH_ACCESS_KEY;
// 	const apiUrl = `https://api.unsplash.com/photos/random?count=10&query=art&client_id=${accessKey}`;

// 	try {
// 		const response = await fetch(apiUrl);
// 		if (!response.ok || response.status !== 200) {
// 			throw new Error("Network response was not ok");
// 		}
// 		const data = await response.json();

// 		const imagesWithBase64 = await Promise.all(
// 			data.map(async (image) => {
// 				const base64 = await getBase64(image.urls.regular);
// 				return { ...image, base64 };
// 			})
// 		);

// 		return imagesWithBase64;
// 		// return data;
// 	} catch (error) {
// 		console.error("There was a problem with the fetch operation:", error);
// 	}
// }

export const fetchPrintedHoodies = async (slug) => {
	try {
		// Decode the name parameter
		const decodedName = decodeURIComponent(slug);

		const jsonData = fs.readFileSync("constants/data/wears.json", "utf8");
		const data = JSON.parse(jsonData);

		// Find the product with the matching name
		const product = data.printed_hoodies?.find((item) => {
			const itemName = decodeURIComponent(item.slug);
			return itemName === decodedName;
		});

		if (!product) {
			throw new Error(`Product with name '${decodedName}' not found`);
		}
		return product;
	} catch (error) {
		// Throw the error to indicate failure
		throw new Error("Error reading data: " + error.message);
	}
};
export const fetchSingleCanvas = async (slug) => {
	try {
		// Decode the name parameter
		const decodedName = decodeURIComponent(slug);

		const jsonData = fs.readFileSync(
			"constants/data/framed-canvas.json",
			"utf8"
		);
		const data = JSON.parse(jsonData);

		// Find the product with the matching name
		const product = data.art_collection?.find((item) => {
			const itemName = decodeURIComponent(item.slug);
			return itemName === decodedName;
		});

		if (!product) {
			throw new Error(`Product with name '${decodedName}' not found`);
		}
		return product;
	} catch (error) {
		// Throw the error to indicate failure
		throw new Error("Error reading data: " + error.message);
	}
};



// export const fetchPrintsData = async () => {
// 	try {
// 		const jsonData = fs.readFileSync("constants/data/paper-print.json", "utf8");
// 		const data = JSON.parse(jsonData);
// 		return data.prints_on_paper;
// 	} catch (error) {
// 		// Throw the error to indicate failure
// 		throw new Error("Error reading data: " + error.message);
// 	}
// };
// export const fetchWearsData = async () => {
// 	try {
// 		const jsonData = fs.readFileSync("constants/data/wears.json", "utf8");
// 		const data = JSON.parse(jsonData);
// 		return data.printed_hoodies;
// 	} catch (error) {
// 		// Throw the error to indicate failure
// 		throw new Error("Error reading data: " + error.message);
// 	}
// };



{
	/* <div className="flex items-center h-[70vh] gap-8 overflow-x-auto md:hidden">
    {images &&
        images?.map((image, i) => (
            <Image
                src={image}
                alt={`${name}'s image-${i}`}
                height={500}
                width={300}
                className="object-cover h-full w-[300px]"
                sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
            />
        ))}
</div> */
}
{
	/* <div className="flex items-center justify-center gap-5">
					{images.map((image, i) => {
						return (
							<button onClick={() => setSlider(i)}>
								<Image
									src={image}
									height={100}
									width={100}
									className="w-[80px] h-[80px] object-cover cursor-pointer"
									alt={`${name}'s image`}
								/>
							</button>
						);
					})}
				</div> */
}


const [openNav, setOpenNav] = useState(false);
	const navRef = useRef<HTMLDivElement | null>(null);
	const tl = useRef<gsap.core.Timeline | null>(null);
	useGSAP(() => {
		tl.current = gsap.timeline({ paused: true });

		tl.current
			.to(navRef.current, {
				duration: 0.8,
				ease: "power4.inOut",
				clipPath: "polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)",
				pointerEvents: "all",
			})
			.from(
				".menu__item",
				{
					duration: 1.7,
					delay: 0,
					x: -100,
					opacity: 0,
					stagger: {
						amount: 0.4,
					},
					ease: "Expo.easeInOut",
				},
				"-=1"
			)
			.from(
				".socials",
				{
					duration: 0.5,
					y: 100,
					opacity: 0,
					stagger: {
						amount: 0.4,
					},
					ease: "Expo.easeOut",
				},
				"-=1.4"
			);
	}, []);